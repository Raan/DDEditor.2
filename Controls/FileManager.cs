using SharpDX.Direct3D9;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Editor.Controls;
using Editor;
using System.IO.Compression;
using System.Runtime.ConstrainedExecution;
using static System.Windows.Forms.LinkLabel;

namespace DivEditor.Controls
{
    internal static class FileManager
    {
        //------------------------------------------------------------------------------------------------------------------------
        public static bool ReadConfig(string inpFile)
        {
            if (File.Exists(inpFile))
            {
                string[] lines = File.ReadLines(inpFile).ToArray();
                if (lines.Length == 8)
                {
                    GameData.pathToDivFolder = lines[3];
                    GameData.pathToEditWorldFolder = lines[5];
                    GameData.worldMapNumber = int.Parse(lines[7]);
                    return true;
                }
                else
                {
                    File.Delete(inpFile);
                    return false;
                }
            }
            else
            {
                bool fileRead = false;
                while (!fileRead)
                {
                    OpenFileDialog openFileDialog1 = new()
                    {
                        InitialDirectory = @"C:\",
                        Title = "Browse Files",
                        CheckFileExists = true,
                        CheckPathExists = true,
                        DefaultExt = "data",
                        Filter = "div.exe (*.exe)|*.exe",
                        FilterIndex = 2,
                        RestoreDirectory = true,
                        ReadOnlyChecked = true,
                        ShowReadOnly = true
                    };
                    if (openFileDialog1.ShowDialog() == DialogResult.OK)
                    {
                        String path = openFileDialog1.FileName;
                        //F:\SteamLibrary\steamapps\common\divine_divinity\div.exe
                        if (path.Remove(0, path.Length - 7) == "div.exe")
                        {
                            GameData.pathToDivFolder = path.Remove(path.Length - 8, 8);
                            fileRead = true;
                        }
                    }
                }
                fileRead = false;
                while (!fileRead)
                {
                    OpenFileDialog openFileDialog1 = new()
                    {
                        InitialDirectory = @"C:\",
                        Title = "Browse Files",
                        CheckFileExists = true,
                        CheckPathExists = true,
                        DefaultExt = "data",
                        Filter = "world files (*.x)|*.x*",
                        FilterIndex = 2,
                        RestoreDirectory = true,
                        ReadOnlyChecked = true,
                        ShowReadOnly = true
                    };
                    if (openFileDialog1.ShowDialog() == DialogResult.OK)
                    {
                        String path = openFileDialog1.FileName;
                        //F:\SteamLibrary\steamapps\common\divine_divinity\savegames\test_3\world.x0
                        if (path.Remove(0, path.Length - 8) == "world.x0" ||
                            path.Remove(0, path.Length - 8) == "world.x1" ||
                            path.Remove(0, path.Length - 8) == "world.x2" ||
                            path.Remove(0, path.Length - 8) == "world.x3" ||
                            path.Remove(0, path.Length - 8) == "world.x4")
                        {
                            GameData.pathToEditWorldFolder = path.Remove(path.Length - 9, 9);
                            GameData.worldMapNumber = int.Parse(path.Remove(0, path.Length - 1));
                            fileRead = true;
                        }
                    }
                }
                WriteConfig();
                return true;
            }
        }
        //------------------------------------------------------------------------------------------------------------------------
        public static void WriteConfig()
        {
            String[] lines = new string[8];
            lines[0] = "//            line order is important, do not edit this file!";
            lines[1] = "";
            lines[2] = "// Game directory";
            lines[3] = GameData.pathToDivFolder;
            lines[4] = "// Savegame or main direct";
            lines[5] = GameData.pathToEditWorldFolder;
            lines[6] = "// World";
            lines[7] = GameData.worldMapNumber.ToString();
            File.WriteAllLines("Editor\\config.ini", lines);
        }
        //------------------------------------------------------------------------------------------------------------------------
        public static List<ObjectsDescriptions> ReadObjectsInfo(string inpFile)
        {
            List<ObjectsDescriptions> objDesc = new();
            using StreamReader reader = new(inpFile);
            string line;
            string[] words;
            while ((line = reader.ReadLine()) != null)
            {
                words = line.Split(new char[] { '|' });
                objDesc.Add(new ObjectsDescriptions(words[0],                                                          // SpriteID
                                                    Convert.ToInt32(words[2]),                                         // Height
                                                    Convert.ToInt32(words[1]),                                         // Width
                                                    new Point(Convert.ToInt32(words[3]), Convert.ToInt32(words[4])),   // touchPoint
                                                    Convert.ToInt32(words[5]),                                         // var_0
                                                    Convert.ToInt32(words[6]),                                         // var_1
                                                    Convert.ToInt32(words[7])));                                       // var_2
            }
            return objDesc;
        }
        //------------------------------------------------------------------------------------------------------------------------
        public static void ReadWorldAndObjects(ref MetaTile[,] MTA, ref Objects[] OBJ, string inpDir, int ext)
        {
            int lineLength = 28; // Длинна строки одного объекта в байтах
            long objCount = 0;
            if (File.Exists(inpDir + "\\objects.x" + ext)) // Узнаем количество объектов в файле objects.x
            {
                System.IO.FileInfo file = new(inpDir + "\\objects.x" + ext);
                objCount = file.Length / lineLength;
            }
            else System.Diagnostics.Debug.WriteLine(inpDir + "\\objects.x" + ext + " не найден");
            Objects[] objсt = new Objects[objCount];
            if (File.Exists(inpDir + "\\objects.x" + ext))
            {
                using BinaryReader obj = new(File.Open(inpDir + "\\objects.x" + ext, FileMode.Open));
                for (long i = 0; i < objCount; i++)
                {
                    objсt[i] = new Objects(obj.ReadUInt16(),                                 // var_0
                                           obj.ReadUInt16(),                                 // var_1
                                           obj.ReadUInt16(),                                 // var_2
                                           obj.ReadUInt16(),                                 // var_3
                                           obj.ReadUInt16(),                                 // var_4
                                           obj.ReadUInt16(),                                 // var_5
                                           obj.ReadUInt16(),                                 // var_6
                                           obj.ReadUInt16(),                                 // var_7
                                           obj.ReadUInt16(),                                 // var_8
                                           obj.ReadUInt16(),                                 // var_9
                                           new Point(obj.ReadUInt16(), obj.ReadUInt16()),    // PixelPos
                                           obj.ReadUInt16(),                                 // var_10
                                           obj.ReadUInt16());                                // SpriteID
                }
            }
            else System.Diagnostics.Debug.WriteLine(inpDir + "\\objects.x" + ext + " не найден");
            MetaTile[,] metaArray = new MetaTile[Vars.maxVerticalTails, Vars.maxHorizontalTails];
            int buf1;
            int upt, downt, num, eff, var1, var2;
            if (File.Exists(inpDir + "/world.x" + ext))
            {
                using BinaryReader world = new(File.Open(inpDir + "\\world.x" + ext, FileMode.Open));
                byte[] checksumAll = world.ReadBytes(4096);
                for (int y = 0; y < Vars.maxVerticalTails; y++)
                {
                    byte[] checksum = world.ReadBytes(1024);
                    for (int x = 0; x < Vars.maxHorizontalTails; x++)
                    {
                        downt = world.ReadUInt16();     //Нижние текстуры
                        upt = world.ReadUInt16();       //Верхние текстуры
                        buf1 = world.ReadUInt16();
                        num = world.ReadByte();         //Количество объектов
                        eff = world.ReadUInt16();       //Эффекты плитки
                        buf1 = world.ReadByte();
                        var1 = world.ReadUInt16();      //var1
                        var2 = world.ReadUInt16();      //var2
                        buf1 = world.ReadUInt16();
                        metaArray[y, x] = new MetaTile(downt, upt, eff, var1, var2);
                        for (int i = 0; i < num; i++)
                        {
                            byte[] objectByte = world.ReadBytes(8);
                            int objNum = objectByte[1] / 16 + objectByte[2] * 16 + objectByte[3] * 4096;    // Мировой номер объекта
                            objсt[objNum].Height = objectByte[4];                                           // Высота объекта
                            objсt[objNum].TilePosition = new Point(x, y);                                   // Положение на сетке плиток
                            objсt[objNum].Effect = objectByte[7];                                           // Еффект объекта
                            metaArray[y, x].AddObject(objNum);
                        }
                    }
                }
            }
            else System.Diagnostics.Debug.WriteLine(inpDir + "\\world.x" + ext + " не найден");
            OBJ = objсt;
            MTA = metaArray;
        }
        //------------------------------------------------------------------------------------------------------------------------
        public static void SaveWorldAndObjects(MetaTile[,] MTA, Objects[] OBJ, string outDir, int ext, int count)
        {
            using (BinaryWriter writer = new BinaryWriter(File.Open(outDir + "\\objects.x" + ext, FileMode.Create)))
            {
                for (int i = 0; i < count; i++)
                {
                    if (OBJ[i].Exists) // Если объект существует
                    {
                        writer.Write(Convert.ToUInt16(OBJ[i].Var_0));
                        writer.Write(Convert.ToUInt16(OBJ[i].Var_1));
                        writer.Write(Convert.ToUInt16(OBJ[i].Var_2));
                        writer.Write(Convert.ToUInt16(OBJ[i].Var_3));
                        writer.Write(Convert.ToUInt16(OBJ[i].Var_4));
                        writer.Write(Convert.ToUInt16(OBJ[i].Var_5));
                        writer.Write(Convert.ToUInt16(OBJ[i].Var_6));
                        writer.Write(Convert.ToUInt16(OBJ[i].Var_7));
                        writer.Write(Convert.ToUInt16(OBJ[i].Var_8));
                        writer.Write(Convert.ToUInt16(OBJ[i].Var_9));
                        writer.Write(Convert.ToUInt16(OBJ[i].AbsolutePixelPosition.X));
                        writer.Write(Convert.ToUInt16(OBJ[i].AbsolutePixelPosition.Y));
                        writer.Write(Convert.ToUInt16(OBJ[i].Var_10));
                        writer.Write(Convert.ToUInt16(OBJ[i].SpriteID));
                    }
                    else // Если объект удален
                    {
                        for (int l = 0; l < 14; l++)
                        {
                            writer.Write(Convert.ToUInt16(65535));
                        }
                    }
                }
            }
            using (BinaryWriter writer = new BinaryWriter(File.Open(outDir + "\\world.x" + ext, FileMode.Create)))
            {
                int bufStart = 4096;
                writer.Write(4096);
                for (int i = 0; i < Vars.maxVerticalTails - 1; i++)
                {
                    for (int j = 0; j < Vars.maxHorizontalTails; j++)
                    {
                        bufStart += 18 + MTA[i,j].GetObjectsCount() * 8;
                    }
                    writer.Write(bufStart);
                }
                ushort bufStartSmall = 0;
                for (int i = 0; i < Vars.maxVerticalTails; i++)
                {
                    writer.Write(Convert.ToUInt16(0));
                    for (int j = 0; j < Vars.maxHorizontalTails - 1; j++)
                    {
                        bufStartSmall += Convert.ToUInt16(16 + MTA[i, j].GetObjectsCount() * 8);
                        writer.Write(bufStartSmall);
                    }
                    bufStartSmall = 0;
                    for (int j = 0; j < Vars.maxHorizontalTails; j++)
                    {
                        writer.Write(Convert.ToUInt16(MTA[i, j].DownTileTexture));
                        writer.Write(Convert.ToUInt16(MTA[i, j].UpTileTexture));
                        writer.Write(Convert.ToUInt16(0));
                        writer.Write(Convert.ToByte(MTA[i, j].GetObjectsCount()));
                        writer.Write(Convert.ToUInt16(MTA[i, j].TileEffects));
                        writer.Write((byte)0);
                        writer.Write(Convert.ToUInt16(MTA[i, j].UnknownVar_1));
                        writer.Write(Convert.ToUInt16(MTA[i, j].UnknownVar_2));
                        writer.Write(Convert.ToUInt16(0));
                        for (int k = 0; k < MTA[i, j].GetObjectsCount(); k++)
                        {
                            int XY = OBJ[MTA[i, j].GetObject(k)].PixelPositionInTile.Y * 64 + OBJ[MTA[i, j].GetObject(k)].PixelPositionInTile.X;
                            int Y = XY / 256;
                            int X = XY % 256;
                            int c = MTA[i, j].GetObject(k) / 4096;
                            int b = (MTA[i, j].GetObject(k) - c * 4096) / 16;
                            int a = (MTA[i, j].GetObject(k) - c * 4096) - b * 16;
                            a = a * 16 + Y;
                            writer.Write((byte)X);
                            writer.Write((byte)a);
                            writer.Write((byte)b);
                            writer.Write((byte)c);
                            writer.Write((byte)OBJ[MTA[i, j].GetObject(k)].Height);
                            writer.Write((byte)(OBJ[MTA[i, j].GetObject(k)].SpriteID % 64 * 4));
                            writer.Write((byte)(OBJ[MTA[i, j].GetObject(k)].SpriteID / 64));
                            writer.Write((byte)OBJ[MTA[i, j].GetObject(k)].Effect);
                        }
                    }
                }
                writer.Write(103);
            }
        }
        //------------------------------------------------------------------------------------------------------------------------
        public static List<Terrain> ReadTerrain(string inpFile) // Читаем информацию о текстурах
        {
            List<Terrain> ter = new();
            using StreamReader reader = new(inpFile);
            string line;
            bool terrain = true;
            int terCount = -1;
            string[] words;
            while ((line = reader.ReadLine()) != null && terrain)
            {
                words = line.Split(new char[] { ' ' });
                if (words[0] == "endsection" && words[1] == "terrain") terrain = false;
                if (words[0] == "startdef" && words[1] == "terrain")
                {
                    terCount++;
                    ter.Add(new Terrain());
                    ter[terCount].TerrName = words[2];
                }
                if (words[0] == "transition") ter[terCount].Transition =words[1];
                if (words[0] == "system") ter[terCount].System = int.Parse(words[1]);
                if (words[0] == "tileEffect") ter[terCount].TileEffect = byte.Parse(words[1]);
                if (words[0] == "tile" && words[1] == "base")
                {
                    if (int.Parse(words[5]) > -1)
                    {
                        ter[terCount].addBaseTile(int.Parse(words[3]), int.Parse(words[5]));
                    }
                    else ter[terCount].addBaseTile(int.Parse(words[3]), -1);
                }
                if (words[0] == "tile" && words[1] == "transition")
                {
                    if (int.Parse(words[7]) > -1)
                    {
                        ter[terCount].addTrns(int.Parse(words[3]), int.Parse(words[5]), int.Parse(words[7]));
                    }
                    else ter[terCount].addTrns(int.Parse(words[3]), int.Parse(words[5]), -1);
                }
            }
            return ter;
        }
        //------------------------------------------------------------------------------------------------------------------------
        public static List<Metaobjects> ReadMetaobject(string inpFile) // Читаем информацию о текстурах
        {
            List<Metaobjects> met = new();
            using StreamReader reader = new(inpFile);
            string line;
            bool metaobject = false;
            int metCount = -1;
            string[] words;
            while ((line = reader.ReadLine()) != null && !metaobject)
            {
                words = line.Split(new char[] { ' ' });
                if (words[0] == "startsection" && words[1] == "metaobjects") metaobject = true;
            }
            while ((line = reader.ReadLine()) != null && metaobject)
            {
                words = line.Split(new char[] { ' ' });
                if (words[0] == "endsection" && words[1] == "metaobjects") metaobject = false;
                if (words[0] == "startdef" && words[1] == "metaobject")
                {
                    metCount++;
                    met.Add(new Metaobjects());
                    if (words.Count() > 3) met[metCount].setMet(words[2] + " " + words[3]);
                    else met[metCount].setMet(words[2]);

                }
                if (words[0] == "group") met[metCount].setGroup(words[1]);
                if (words[0] == "type") met[metCount].setType(words[1]);
                if (words[0] == "location") met[metCount].setLocation(words[1]);
                if (words[0] == "walltype") met[metCount].setWalltype(words[1] + " " + words[2]);
                //if (words[0] == "placement") met[metCount].setPlacement(int.Parse(words[2]));
                if (words[0] == "size")
                {
                    met[metCount].setSize(int.Parse(words[1]), int.Parse(words[2]));
                }
                if (words[0] == "object")
                {
                    int[] buff = new int[4];
                    int a = 0;
                    for (int i = 0; i < buff.Length; i++)
                    {
                        if (int.TryParse(words[i], out int b))
                        {
                            buff[a] = b;
                            a++;
                        }
                    }
                    met[metCount].addObject(buff);
                }
            }
            return met;
        }
        //------------------------------------------------------------------------------------------------------------------------
    }
}
